extend type Query {
  """
  ✨ Look up a single `Child` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  child(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Child_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Child_FirstRow
  ): Child @fdc_generated(from: "Child", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Event` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  event(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Event_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Event_FirstRow
  ): Event @fdc_generated(from: "Event", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `HealthRecord` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  healthRecord(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: HealthRecord_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: HealthRecord_FirstRow
  ): HealthRecord @fdc_generated(from: "HealthRecord", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `ShoppingList` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  shoppingList(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ShoppingList_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ShoppingList_FirstRow
  ): ShoppingList @fdc_generated(from: "ShoppingList", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `ShoppingListItem` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  shoppingListItem(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ShoppingListItem_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ShoppingListItem_FirstRow
  ): ShoppingListItem @fdc_generated(from: "ShoppingListItem", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Task` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  task(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Task_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Task_FirstRow
  ): Task @fdc_generated(from: "Task", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `Child` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  children(
    """
    Filter condition to narrow down the query results.
    """
    where: Child_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Child_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Child_Having
  ): [Child!]! @fdc_generated(from: "Child", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Event` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  events(
    """
    Filter condition to narrow down the query results.
    """
    where: Event_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Event_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Event_Having
  ): [Event!]! @fdc_generated(from: "Event", purpose: QUERY_MULTIPLE)
  """
  ✨ List `HealthRecord` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  healthRecords(
    """
    Filter condition to narrow down the query results.
    """
    where: HealthRecord_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [HealthRecord_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: HealthRecord_Having
  ): [HealthRecord!]! @fdc_generated(from: "HealthRecord", purpose: QUERY_MULTIPLE)
  """
  ✨ List `ShoppingList` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  shoppingLists(
    """
    Filter condition to narrow down the query results.
    """
    where: ShoppingList_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ShoppingList_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ShoppingList_Having
  ): [ShoppingList!]! @fdc_generated(from: "ShoppingList", purpose: QUERY_MULTIPLE)
  """
  ✨ List `ShoppingListItem` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  shoppingListItems(
    """
    Filter condition to narrow down the query results.
    """
    where: ShoppingListItem_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ShoppingListItem_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ShoppingListItem_Having
  ): [ShoppingListItem!]! @fdc_generated(from: "ShoppingListItem", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Task` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  tasks(
    """
    Filter condition to narrow down the query results.
    """
    where: Task_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Task_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Task_Having
  ): [Task!]! @fdc_generated(from: "Task", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
